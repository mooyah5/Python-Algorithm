# 2

# 수열이 두 개 주어지고 길이는 동일하다
# A : 120 200 160
# B : 100 50 150

# A 상점은 판매만
# B 상점은 구매만
# => 나는
# A상점으로부터 구매할 수 있고,
# B상점에서 판매할 수 있다.

# 1일차에 A[1] = 120원을 주고 물건 하나 산다.
# 같은 날에 팔면 -20원
# 근데 아꼈다가 3일차에 팔면 +30원

# -120 -100 +150*2 => 80 이득
# 쉬운버전은 N이 1000이하, 어려운 버전은 10만 이하

### 1) N = 1000
# 매일 A[n]일에 샀다면 그것을 언제 파는게 가장 이득일까 생각하기
# 1~N일까지 가장 비싼 순간을 찾아. 그가격보다 비싸다면 그때 팔면 된다.
# 2일차 때도한다. 2~N일까지 가장비싼거 찾고 비싸면 팔아
# 이짓을 계속하면 된다.

n = int(input())
a = list(map(int, input().split()))
b = list(map(int, input().split()))

ans = 0
for i in range(n):  # i 번째 날을 보고, N번 반복
    max_b = max(b[i:])  # 오늘부터 끝날 때까지 최대 판매 가격 찾기
    if max_b > a[i]:  # 만약 그게 이득이면
        ans += max_b - a[i]  # 차액만큼 이득보기

print(ans)

# for 문 n번 반복하는데, 오늘부터 끝날때가지 찾기 위해 또 n번 순회함 O(n^2)
# n==1000 일 때는 괜찮다.

### 2) n = 10만
# 결국 최댓값을 찾는 과정을 반복해서 문제임
# 최댓값 끼리 연관이 있지 않을까?
# 1,2번째 날의 최댓값의 관계 (m1, m2)
# 내가 m2를 안다면, m1의 모든 숫자를 돌 필요 없이
# m2(m2범위의 최대값)과 m1의 추가된 하나의 숫자 중에 큰것만 보면 된다.

# 이렇게 하려면 뒷숫자부터 거꾸로 내려와야 한다.
# m = b[i ... N] 중 최대값
# m1 = max(m2, b[1])

n = int(input())
a = list(map(int, input().split()))
b = list(map(int, input().split()))

# O(n), Suffix Maximun techniq
ans = 0
max_b = 0  # 내가 알고있는 오늘부터 N일까지 중 최대 판매액
for i in range(n - 1, -1, -1):  #
    max_b = max(max_b, b[i])  #
    if max_b > a[i]:
        ans += max_b - a[i]

print(ans)
